- name: Create EC2 infrastructure
  hosts: localhost
  gather_facts: false
  vars:
    project: pwa
    env: prod
    name_prefix: "{{ project }}_{{ env }}"
    aws_region: us-west-2
    vpc_cidr: 10.0.0.0/16
    subnets:
      - az: us-west-2a
        cidr: 10.0.1.0/24
      - az: us-west-2b
        cidr: 10.0.2.0/24
      - az: us-west-2c
        cidr: 10.0.3.0/24
    instances:
      - {name: lb1, tier: lb, az: us-west-2a}
      - {name: app1, tier: app, az: us-west-2a}
      - {name: app2, tier: app, az: us-west-2b}
      - {name: db1, tier: db, az: us-west-2a}
      - {name: db2, tier: db, az: us-west-2b}
    keypair_name: percy_id_ed25519
    instance_type: t4g.micro
    instance_arch: arm64
    ubuntu_ami_prefix: hvm-ssd/ubuntu-jammy-22.04
    cpu_credit_specification: unlimited
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ name_prefix }}_vpc"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ aws_region }}"
      register: vpc

    - name: Create internet gateway
      ansible.builtin.ec2_vpc_igw:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: "{{ name_prefix }}_igw"
      register: igw

    - name: Create subnets
      ansible.builtin.ec2_vpc_subnet:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        az: "{{ item.az }}"
        cidr: "{{ item.cidr }}"
        tags:
          Name: "{{ name_prefix }}_{{ item.az }}"
      register: subnet
      loop: "{{ subnets }}"

    - name: Create AZ to Subnet ID map
      set_fact:
        az_to_subnet_id: >-
          {%- set az_subnet = {} -%}
          {%- for item in subnet.results -%}
            {%- set _ = az_subnet.update({ item.subnet.availability_zone: item.subnet.id }) -%}
          {%- endfor -%}
          {{ az_subnet }}

    - name: Create public route table
      ansible.builtin.ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        subnets: "{{ subnet.results | map(attribute='subnet.id') | list }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
          - dest: ::/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ name_prefix }}_public_route_table"
      register: public_route_table

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: "{{ name_prefix }}_sg"
        description: "{{ name_prefix }}_sg"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 8000
              - 5432
            group_name: "{{ name_prefix }}_sg"
      register: sg

    - name: Get AMI ID
      amazon.aws.ec2_ami_info:
        region: "{{ aws_region }}"
        owners: 099720109477
        filters:
          name: "ubuntu/images/{{ ubuntu_ami_prefix }}-{{ instance_arch }}-server-*"
      register: ami

    - name: Create instances
      amazon.aws.ec2_instance:
        region: "{{ aws_region }}"
        name: "{{ name_prefix }}_{{ item.name }}"
        key_name: "{{ keypair_name }}"
        vpc_subnet_id: "{{ az_to_subnet_id[item.az] }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ sg.group_id }}"
        image_id: "{{ ami.images[-1].image_id }}"
        network:
          assign_public_ip: true
        cpu_credit_specification: "{{ cpu_credit_specification }}"
        tags:
          Environment: "{{ env }}"
          Tier: "{{ item.tier }}"
      register: instance
      loop: "{{ instances }}"
